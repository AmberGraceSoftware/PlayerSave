"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[278],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>v});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),p=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},c=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=p(a),d=r,v=m["".concat(l,".").concat(d)]||m[d]||u[d]||o;return a?n.createElement(v,i(i({ref:t},c),{},{components:a})):n.createElement(v,i({ref:t},c))}));function v(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[m]="string"==typeof e?e:r,i[1]=s;for(var p=2;p<o;p++)i[p]=a[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},74327:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var n=a(87462),r=(a(67294),a(3905));const o={sidebar_position:3},i="Incorrect API Usage",s={unversionedId:"incorrect_api_usage",id:"incorrect_api_usage",title:"Incorrect API Usage",description:"PlayerSave's API has a few key limitations to look out for!",source:"@site/docs/incorrect_api_usage.md",sourceDirName:".",slug:"/incorrect_api_usage",permalink:"/docs/incorrect_api_usage",draft:!1,editUrl:"https://github.com/AmberGraceSoftware/PlayerSave/edit/master/docs/incorrect_api_usage.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"defaultSidebar",previous:{title:"Mechanisms",permalink:"/docs/mechanisms"}},l={},p=[{value:"Table Mutations",id:"table-mutations",level:2},{value:"Setting Mutable Tables in a Save",id:"setting-mutable-tables-in-a-save",level:2},{value:"Unsecured Remotes",id:"unsecured-remotes",level:2}],c={toc:p},m="wrapper";function u(e){let{components:t,...a}=e;return(0,r.kt)(m,(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"incorrect-api-usage"},"Incorrect API Usage"),(0,r.kt)("p",null,"PlayerSave's API has a few key limitations to look out for!"),(0,r.kt)("h2",{id:"table-mutations"},"Table Mutations"),(0,r.kt)("p",null,"One core feature of PlayerSave is that all changes to player save data are ",(0,r.kt)("a",{parentName:"p",href:"../api/Save#Subscribe"},"Observable"),". This is achieved by only allowing data to be changed in a player's save via ",(0,r.kt)("a",{parentName:"p",href:"../api/Save#Set"},"Setter methods"),"."),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"However"),", ",(0,r.kt)("strong",{parentName:"p"},"there are still ways to accidentally modify save data")," that the PlayerSave library is not able to observe to at runtime!"),(0,r.kt)("admonition",{type:"warning"},(0,r.kt)("p",{parentName:"admonition"},"You should never directly edit a table returned by ",(0,r.kt)("a",{parentName:"p",href:"../api/Save#Get"},(0,r.kt)("inlineCode",{parentName:"a"},"save:Get()")),"! For example:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'local inventory = save:Get("Inventory", {})\ntable.insert(inventory, "Sword") -- Incorrect! `inventory` should not be mutated\nsave:Set("Inventory", inventory) -- Will throw an error.\n')),(0,r.kt)("p",{parentName:"admonition"},"Mutating a value directly like this will result in ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"desynchronization"))," between server data and client data. It may also prevent listeners connected via ",(0,r.kt)("a",{parentName:"p",href:"../api/Save#Subscribe"},(0,r.kt)("inlineCode",{parentName:"a"},"save:Subscribe()"))," from firing when they are supposed to.")),(0,r.kt)("p",null,"PlayerSave provides a number of useful ways to modify tables in a player's save.\nFor example, to insert a value into a list, you can simply call:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'save:ListInsert("Inventory", "Sword)\n')),(0,r.kt)("p",null,"If your use case is not covered by methods like ",(0,r.kt)("a",{parentName:"p",href:"../api/Save#ListInsert"},(0,r.kt)("inlineCode",{parentName:"a"},"save:ListInsert()")),", ",(0,r.kt)("a",{parentName:"p",href:"../api/Save#ListRemove"},(0,r.kt)("inlineCode",{parentName:"a"},"save:ListRemove()")),", or ",(0,r.kt)("a",{parentName:"p",href:"../api/Save#ListSwapRemove"},(0,r.kt)("inlineCode",{parentName:"a"},"save:ListSwapRemove()")),", you can use the method ",(0,r.kt)("a",{parentName:"p",href:"../api/Save#GetDeepCopy"},(0,r.kt)("inlineCode",{parentName:"a"},"save:GetDeepCopy()"))," to get a copy of a saved value which is safe to mutate:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'local inventory = save:GetDeepCopy("Inventory", {})\ntable.insert(inventory, "Sword") -- OK, since this is a deep copy of save data!\nsave:Set("Inventory", inventory) -- OK!\n')),(0,r.kt)("h2",{id:"setting-mutable-tables-in-a-save"},"Setting Mutable Tables in a Save"),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"PlayerSave will automatically make deep copies of tables passed into ",(0,r.kt)("a",{parentName:"p",href:"../api/Save#Set"},(0,r.kt)("inlineCode",{parentName:"a"},"save:Set()")),", or as a second argument (",(0,r.kt)("inlineCode",{parentName:"p"},"defaultValue"),") to ",(0,r.kt)("a",{parentName:"p",href:"../api/Save#Get"},(0,r.kt)("inlineCode",{parentName:"a"},"save:Get()")),"."),(0,r.kt)("p",{parentName:"admonition"},"This means you do not have to worry about mutating values that are later stored in a save."),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'local myTable = {}\nsave:Set("Value1", myTable) -- OK\ntable.insert(myTable, "Foo") -- OK; this will not affect Value1!\nsave:Get("Value2", myTable) -- OK\ntable.insert(myTable, "Fighters") -- OK; this will not affect Value1 or Value2!\n\nprint(#save:Get("Value1")) -- 0\nprint(#save:Get("Value2")) -- 1\nprint(#myTable) -- 2\n'))),(0,r.kt)("h2",{id:"unsecured-remotes"},"Unsecured Remotes"),(0,r.kt)("p",null,"One limitation of all player saving systems, which PlayerSave is by no means immune to, is the possibility of exploited data ending up in a player's save."),(0,r.kt)("p",null,"Whenever you write code that listens to a RemoteEvent / RemoteFunction, you should ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"never trust values sent from the client to the server!"))," Failing to perform sanity checks on values sent by the client could result in exploits that remain in a player's save forever."),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Never trust values sent from the client to the server!"),(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("strong",{parentName:"p"},"Unsecured Remote Example (using ",(0,r.kt)("a",{parentName:"strong",href:"https://sleitnick.github.io/Knit/"},"Knit"),"):")),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'function LevelUpService.Client:SpendExperienceShards(\n    player: Player,\n    amount: number\n)\n    local save = PlayerSave.Get(player)\n    save:Increment("ExperienceShards", -amount)\n    save:Increment("ExperienceLevel", amount)\nend\n')),(0,r.kt)("p",{parentName:"admonition"},"Exploiters are able to call any remote function with arbitrary arguments. Take a moment to consider what the net effect would be after making any of the following requests:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'LevelUpService:SpendExperienceShards(-100000)\nLevelUpService:SpendExperienceShards(math.huge)\nLevelUpService:SpendExperienceShards(1/0)\nLevelUpService:SpendExperienceShards(0/0)\nLevelUpService:SpendExperienceShards(0.000001)\nLevelUpService:SpendExperienceShards(0)\nLevelUpService:SpendExperienceShards(Vector3.new(0.5, -1, 1 / 0))\nLevelUpService:SpendExperienceShards("Oops, I corrupted the save!")\n'))),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"It's a good idea to perform sanity checks on values provided by the client that will end up in a player's save."),(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("strong",{parentName:"p"},"Example of a secured remote:")),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'function LevelUpService.Client:SpendExperienceShards(\n    player: Player,\n    amount: unknown -- Never assume the type of a value sent by a player!\n)\n    -- Loaded save check\n    local save = PlayerSave.GetLoaded(player)\n    if not save then\n        return\n    end\n    -- Type check\n    if typeof(amount) ~= "number" then\n        return\n    end\n    -- NaN check\n    if amount ~= amount then\n        return\n    end\n    -- Range check\n    local currentShards = save:Get("ExperienceShards", 0)\n    if amount < 1 or amount > currentShards then\n        return\n    end\n    -- Integer check\n    if amount ~= math.floor(amount) then\n        return\n    end\n\n    -- All sanity checks have passed! Now we are safe to edit the player\'s data.\n\n    save:Increment("ExperienceShards", -amount)\n    save:Increment("ExperienceLevel", amount)\nend\n'))))}u.isMDXComponent=!0}}]);